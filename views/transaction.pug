extends layout

block content
  br
  .container
    .card
      .card-header
        ul.nav.nav-tabs.card-header-tabs#myTab(role='tablist')
          li.nav-item
            a.nav-link.active#sign-tab(data-toggle='tab', href='#sign', role='tab', aria-controls='sign', aria-selected='true') #{__('Sign')}
          li.nav-item
            a.nav-link#verify-tab(data-toggle='tab', href='#verify', role='tab', aria-controls='verify', aria-selected='false') #{__('Verify')}
      .card-body#card
        .tab-content#myTabContent
          .tab-pane.show.active#sign(role='tabpanel', aria-labelledby='sign-tab')
            form.form-horizontal
              .form-group
                label.control-label(for='data') #{__('Message')}
                .input-group
                  .input-group-addon #{__('$')}
                  input.form-control#sign-amount
                  .input-group-addon #{__('From')}:
                  input.form-control#sign-from
                  .input-group-addon #{__('To')}:
                  input.form-control#sign-to
              .form-group
                label.control-label(for='data') #{__('Private Key')}
                input#privateKey(type='number').form-control
              .form-group
                button#sign-button.btn.btn-block.btn-primary(type='button') #{__('Sign')}
              .form-group
                label.control-label(for='data') #{__('Message Signature')}
                input#sign-signature.form-control(disabled)
          .tab-pane#verify(role='tabpanel', aria-labelledby='verify-tab')
            form.form-horizontal
              .form-group
                label.control-label(for='data') #{__('Message')}
                .input-group
                  .input-group-addon #{__('$')}
                  input.form-control#verify-amount
                  .input-group-addon #{__('From')}:
                  input.form-control.border-primary#verify-from
                  .input-group-addon -&gt;
                  input.form-control#verify-to(value='04cc955bf8e359cc7ebbb66f4c2dc616a93e8ba08e93d27996e20299ba92cba9cbd73c2ff46ed27a3727ba09486ba32b5ac35dd20c0adec020536996ca4d9f3d74')
              .form-group
                label.control-label(for='data') #{__('Signature')}
                input#verify-signature.form-control
              .form-group
                button#verify-button.btn.btn-block.btn-primary(type='button') #{__('Verify')}
    hr
    .container-fluid
    .row
    - var peers = {1: 'A', 2: 'B'}
    each peer, chain in peers
      h3 #{__('Peer')} #{peer}
      .d-flex.flex-nowrap
        - var blocks = []
        - blocks.push({block: 1, chain: chain, nonce: 0, txs: [], previous: '0000000000000000000000000000000000000000000000000000000000000000'})
        - blocks.push({block: 2, chain: chain, nonce: 0, txs: [], previous: ''})
        - blocks.push({block: 3, chain: chain, nonce: 0, txs: [], previous: ''})
        - blocks.push({block: 4, chain: chain, nonce: 0, txs: [], previous: ''})
        - blocks.push({block: 5, chain: chain, nonce: 0, txs: [], previous: ''})
        each block in blocks
          .col-10
          .well(id='block' + block.block + 'chain' + block.chain + 'well')
            include includes/block.pug

  script.
    var EC = elliptic.elliptic().ec;
    var ec = new EC('secp256k1');

    var keypair = ec.genKeyPair();
    if (Cookies.get('privateKey')) {
      keypair = ec.keyFromPrivate(Cookies.get('privateKey'));
    }

    var blocks = [];

    function update() {
      var prv = keypair.getPrivate('hex');
      var pub = keypair.getPublic('hex');
      $('#privateKey').val(bigInt(prv, 16).toString());
      $('#sign-from').val(pub);
      $('#verify-from').val(pub);
      Cookies.set('privateKey', prv.toString());
      Cookies.set('publicKey', pub);
    }

    function resetVerifier() {
      $('#card').removeClass('alert-success');
      $('#card').removeClass('alert-danger');
    }

    $(function() {

      var peers = {1: 'A', 2: 'B'};
      for (let peer in peers) {
        blocks.push({block: 1, chain: peers[peer], nonce: 0, txs: [], previous: '0000000000000000000000000000000000000000000000000000000000000000'});
        blocks.push({block: 2, chain: peers[peer], nonce: 0, txs: [], previous: ''});
        blocks.push({block: 3, chain: peers[peer], nonce: 0, txs: [], previous: ''});
        blocks.push({block: 4, chain: peers[peer], nonce: 0, txs: [], previous: ''});
        blocks.push({block: 5, chain: peers[peer], nonce: 0, txs: [], previous: ''});
      }

      $('#sign-button').click(function() {
        var amount = $('#sign-amount').val();
        var from = $('#sign-from').val();
        var to = $('#sign-to').val();
        var message = amount + from + to;
        var binaryMessage = buffer.Buffer.from(CryptoJS.SHA512(message).toString(CryptoJS.enc.Hex));
        var hexSignature = buffer.Buffer.from(keypair.sign(binaryMessage).toDER()).toString('hex');
        $('#sign-signature').val(hexSignature);
        $('#verify-signature').val(hexSignature);

        var transaction = {
          value: $('#sign-amount').val(),
          from: $('#sign-from').val(),
          to: $('#sign-to').val(),
          signature: hexSignature
        };

        addTransaction(transaction);

        update();
        resetVerifier();
      });

      $('#verify-button').click(function() {
        $('#verify-from').val($('#verify-from').val().replace(/[^0-9a-fA-F]/g, ''));
        var tmpKey;
        try {
          tmpKey = ec.keyFromPublic($('#verify-from').val(), 'hex');
          var message = $('#verify-amount').val() + $('#verify-from').val() + $('#verify-to').val();
          var binaryMessage = buffer.Buffer.from(CryptoJS.SHA512(message).toString(CryptoJS.enc.Hex));
          if (tmpKey.verify(binaryMessage, $('#verify-signature').val())) {
            $('#card').addClass('alert-success');
          }
          else {
            $('#card').addClass('alert-danger');
          }
        }
        catch(e) {
          $('#card').addClass('alert-danger');
        }
      });

      $('#sign-signature').bind('keyup', function() {
        resetVerifier();
      });
      $('#sign-amount').bind('keyup', function() {
        resetVerifier();
      });
      $('#sign-from').bind('keyup', function() {
        resetVerifier();
      });
      $('#sign-to').bind('keyup', function() {
        resetVerifier();
      });
      $('#verify-signature').bind('keyup', function() {
        resetVerifier();
      });
      $('#verify-amount').bind('keyup', function() {
        resetVerifier();
      });
      $('#verify-from').bind('keyup', function() {
        resetVerifier();
      });
      $('#verify-to').bind('keyup', function() {
        resetVerifier();
      });
      $('#publicKey').bind('keyup', function() {
        resetVerifier();
      });
      $('#privateKey').bind('keyup', function() {
        $('#privateKey').val($('#privateKey').val().replace(/\D/g, ''));
        keypair = ec.keyFromPrivate(bigInt($('#privateKey').val()).toString(16));
        resetVerifier();
        update();
      });
      $('#myTab').on('shown.bs.tab', function (e) {
        resetVerifier();
      });
      update();
    });

    function addTransaction(transaction) {
      let blockInfo = findNextAvailableBlock();
      if (blockInfo) {
        let lastTx = blockInfo.block.txs.length > 0 ? blockInfo.block.txs[blockInfo.block.txs.length - 1] : null;
        transaction.seq = lastTx ? lastTx.seq + 1 : 1;
        blockInfo.block.txs.push(transaction);
        addTransactionToDOM(blockInfo.block.block, blockInfo.peer, blockInfo.block.txs.length - 1, transaction);
        checkIfMiningAllowed(blockInfo.block.block, blockInfo.peer);
      } else {
        console.error("No available block found");
      }
    }

    function findNextAvailableBlock() {
      for (let peer of ['A', 'B']) {
        for (let i = 2; i <= 5; i++) {
          let block = blocks.find(b => b.block === i && b.chain === peer);
          if (block && block.txs.length < 16) {
            return { block: block, peer: peer };
          }
        }
      }
      return null;
    }

    function addTransactionToDOM(blockIndex, peer, txIndex, transaction) {
      let transactionsContainerId = '#transactions-container' + blockIndex + 'chain' + (peer == 'A' ? 1 : 2);
      let transactionsContainer = $(transactionsContainerId);

      if (!transactionsContainer.length) {
        console.error('No se encontrÃ³ el contenedor de transacciones en el DOM.');
        return;
      }

      let transactionHTML = `
        <div class="input-group">
          <span class="input-group-addon">$</span>
          <input class="form-control" id="block${blockIndex}chain${peer}tx${txIndex}value" type="text" value="${transaction.value}" onkeyup="updateChain(${blockIndex}, '${peer}', ${txIndex});">
          <span class="input-group-addon">From:</span>
          <input class="form-control" id="block${blockIndex}chain${peer}tx${txIndex}from" type="text" value="${transaction.from}" onkeyup="updateChain(${blockIndex}, '${peer}', ${txIndex});">
          <span class="input-group-addon">-&gt;</span>
          <input class="form-control" id="block${blockIndex}chain${peer}tx${txIndex}to" type="text" value="${transaction.to}" onkeyup="updateChain(${blockIndex}, '${peer}', ${txIndex});">
        </div>
        <div class="input-group">
          <span class="input-group-addon">Seq:</span>
          <input class="form-control col-sm-1" id="block${blockIndex}chain${peer}tx${txIndex}seq" type="text" value="${transaction.seq}" onkeyup="updateChain(${blockIndex}, '${peer}', ${txIndex});">
          <span class="input-group-addon">Sig:</span>
          <input class="form-control" id="block${blockIndex}chain${peer}tx${txIndex}sig" type="text" value="${transaction.signature}" onkeyup="updateChain(${blockIndex}, '${peer}', ${txIndex});">
        </div>
        <br>`;
      transactionsContainer.append(transactionHTML);
    }
    function checkIfMiningAllowed(blockIndex, peer) {
      let peerModificado = (peer == 'A' ? 1 : 2);
      let block = blocks.find(b => b.block === blockIndex && b.chain === peer);
      console.log(block);
      if (block !== undefined && (block.txs.length >= 16 || block.block === 1)) {
        $('#block' + blockIndex + 'chain' + peerModificado + 'mineButton').prop('disabled', false);
      } else {
        $('#block' + blockIndex + 'chain' + peerModificado + 'mineButton').prop('disabled', true);
      }
    }

    $(function() {
      setup(1, 1, 0);
      setup(2, 1, 4);
      setup(3, 1, 3);
      setup(4, 1, 3);
      setup(5, 1, 4);

      setup(1, 2, 0);
      setup(2, 2, 4);
      setup(3, 2, 3);
      setup(4, 2, 3);
      setup(5, 2, 4);
    });

    function getText(block, chain) {
      var s = $('#block'+block+'chain'+chain+'number').val() +
              $('#block'+block+'chain'+chain+'nonce').val() +
              $('#block'+block+'chain'+chain+'coinbasevalue').val() +
              $('#block'+block+'chain'+chain+'coinbaseto').val();

      for (var x=0; $('#block'+block+'chain'+chain+'tx'+x+'value').length > 0; x++) {
        s = s + $('#block'+block+'chain'+chain+'tx'+x+'value').val() +
                $('#block'+block+'chain'+chain+'tx'+x+'from').val() +
                $('#block'+block+'chain'+chain+'tx'+x+'to').val() +
                $('#block'+block+'chain'+chain+'tx'+x+'seq').val() +
                $('#block'+block+'chain'+chain+'tx'+x+'sig').val();
      }
      s = s + $('#block'+block+'chain'+chain+'previous').val();
      return s;
    }

    function setup(block, chain, txCount) {
      for (var x=0; x<txCount; x++) {
        verifySignature(block, chain, x);
      }
      updateHash(block, chain);
      $('#block'+block+'chain'+chain+'mineButton').click(function(e) {
          e.preventDefault();
          var l = Ladda.create(this);
          l.start();
          setTimeout(function() {
              mine(block, chain, true);
              l.stop();
            }, 250); // give UI time to update
        });
    }

    function verifySignature(block, chain, tx) {
      try {
        var message = $('#block'+block+'chain'+chain+'tx'+tx+'value').val() +
                      $('#block'+block+'chain'+chain+'tx'+tx+'from').val() +
                      $('#block'+block+'chain'+chain+'tx'+tx+'to').val() +
                      $('#block'+block+'chain'+chain+'tx'+tx+'seq').val();
        var binaryMessage = buffer.Buffer.from(CryptoJS.SHA512(message).toString(CryptoJS.enc.Hex));
        var pubKey = ec.keyFromPublic($('#block'+block+'chain'+chain+'tx'+tx+'from').val(), 'hex');
        if (pubKey.verify(binaryMessage, $('#block'+block+'chain'+chain+'tx'+tx+'sig').val()))
          $('#block'+block+'chain'+chain+'tx'+tx+'sig').removeClass('text-danger');
        else
          $('#block'+block+'chain'+chain+'tx'+tx+'sig').addClass('text-danger');
      }
      catch(e) {
        console.log(e);
      }
    }
